{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["axios","interceptors","request","use","config","headers","regex","document","cookie","match","defaults","withCredentials","post","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","name","age","change","bind","assertThisInitialized","write","read","key","e","setState","defineProperty","target","value","data","console","log","res","get","_this2","react_default","a","createElement","className","onChange","onClick","Component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wUAMAA,IAAMC,aAAaC,QAAQC,IAAI,SAACC,GAC9BA,EAAOC,QAAQ,oBAAsB,iBACrC,IAAIC,EAAQ,0BAEZ,OADAF,EAAOC,QAAQ,eAAkD,OAAjCE,SAASC,OAAOC,MAAMH,GAAkB,KAAOC,SAASC,OAAOC,MAAMH,GAAO,GACrGF,IAGTJ,IAAMU,SAASC,iBAAgB,EAC/BX,IAAMU,SAASL,QAAQO,KAAK,gBAAgB,uBA4D7BC,cAvDb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAM,CACTC,KAAK,GACLC,IAAI,GAGNT,EAAKU,OAAOV,EAAKU,OAAOC,KAAZV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KACZA,EAAKa,MAAMb,EAAKa,MAAMF,KAAXV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KACXA,EAAKc,KAAKd,EAAKc,KAAKH,KAAVV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KATMA,sEAYXe,EAAIC,GACTb,KAAKc,SAALhB,OAAAiB,EAAA,EAAAjB,CAAA,GAESc,EAAKC,EAAEG,OAAOC,+JAMnBC,iBAASlB,KAAKI,OAClBe,QAAQC,IAAIF,YAEEpC,IAAMY,KAAN,WAAsBwB,UAAhCG,SAGJF,QAAQC,IAAIC,kQASEvC,IAAMwC,IAAN,mBAAVD,SAEJF,QAAQC,IAAIC,sIAGL,IAAAE,EAAAvB,KACP,OACEwB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,SAAOE,SAAU,SAACf,GAAD,OAAMU,EAAKhB,OAAO,OAAOM,MAC1CW,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOE,SAAU,SAACf,GAAD,OAAMU,EAAKhB,OAAO,MAAMM,MACzCW,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQG,QAAS7B,KAAKU,OAAtB,SACAc,EAAAC,EAAAC,cAAA,UAAQG,QAAS7B,KAAKW,MAAtB,gBAlDUmB,aCNEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS3C,MACvB,2DCZN4C,IAASC,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,MAAShD,SAASiD,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e33a670b.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios'\n\n// 拦截request,设置全局请求为ajax请求\naxios.interceptors.request.use((config) => {\n  config.headers['X-Requested-With'] = 'XMLHttpRequest';\n  let regex = /.*csrftoken=([^;.]*).*$/; // 用于从cookie中匹配 csrftoken值\n  config.headers['X-CSRFToken'] = document.cookie.match(regex) === null ? null : document.cookie.match(regex)[1];\n  return config\n});\n\naxios.defaults.withCredentials=true;\naxios.defaults.headers.post['Content-Type']='application/json';\n// const server = 'http://127.0.01:8080';//这个要写在etc/settings里\n\n//https://blog.csdn.net/div_ma/article/details/80436727  react-router-dom\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      name:\"\",\n      age:0\n    }\n\n    this.change=this.change.bind(this);\n    this.write=this.write.bind(this);\n    this.read=this.read.bind(this);\n  }\n\n  change(key,e){\n    this.setState(\n        {\n            [key]:e.target.value\n        }\n    );\n  }\n\n  async write(){\n    let data={...this.state};\n    console.log(data);\n    // let res=await axios.post(`${server}/write/`,data);\n    let res=await axios.post(`/person/`,data);\n    // let res=await axios.post(`/person`,data);\n\n    console.log(res);\n  }\n\n  async read(){\n    // let params={\n    //   name:'a'\n    // }\n    // let res=await axios.get(`${server}/read/`,{params});\n    // let res=await axios.get(`${server}/person`);\n    let res=await axios.get(`/person/`);\n\n    console.log(res);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <input onChange={(e)=>(this.change('name',e))}/>\n        <br />\n        <input onChange={(e)=>(this.change('age',e))} />\n        <br />\n        <button onClick={this.write}>write</button>\n        <button onClick={this.read}>read</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}